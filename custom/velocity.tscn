[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]

script/source = "extends Node

### Has only one Method ###
# move(x, y=0)
###

var velocity = Vector2(0, 0)
export var normalization = false
export var fallingDown = false
var body # KinematicBody2D
export var maxX = 50
export var maxY = 50
export var points_x = 1
export var points_y = 1

signal obstacle_x(collider)
signal obstacle_y(collider)

func move(x, y = 0):
	# X manipulation
	if x > 0 and velocity.x < 0:
		velocity.x = 0
	elif x < 0 and velocity.x > 0:
		velocity.x = 0
	velocity.x += x
	# Y manipulation
	if y > 0 and velocity.y < 0:
		velocity.y = 0
	elif y < 0 and velocity.y > 0:
		velocity.y = 0
	velocity.y += y

func limit(x, y):
	maxX = x
	maxY = y
		
func _ready():
	body = get_parent()
	print(body)
	
func _physics_process(delta):
	if fallingDown: velocity.y += points_y
	var obstacle_y = body.move_and_collide(Vector2(0, velocity.y))
	if obstacle_y:
		if velocity.y > points_y or velocity.y < -points_y:
			emit_signal(\"obstacle_y\", obstacle_y)
		velocity.y = 0
	if velocity.x != 0: # If Horizontal Velocity is <> than 0
		var obstacle_x = body.move_and_collide(Vector2(velocity.x, 0))
		if obstacle_x:
			emit_signal(\"obstacle_x\", obstacle_x)
			velocity.x = 0
	if normalization: # If Normalisation is turned on
		if velocity.x > 0 and velocity.x < points_x: velocity.x = 0
		if velocity.x < 0 and velocity.x > -points_x: velocity.x  = 0
		if velocity.x < 0: velocity.x += points_x
		if velocity.x > 0: velocity.x -= points_x
		if velocity.x > maxX: velocity.x = maxX
		if velocity.x < -maxX: velocity.x = -maxX
		if !fallingDown: # If Body isn't falling, then normalize also velocity's Y
			if velocity.y < 0: velocity.y += points_y
			if velocity.y > 0: velocity.y -= points_y
			if velocity.y > maxY: velocity.y = maxY
			if velocity.y < -maxY: velocity.y = -maxY
			if velocity.y > 0 and velocity.y < points_y: velocity.y = 0
			if velocity.y < 0 and velocity.y > -points_y: velocity.y  = 0"

[node name="velocity" type="Node" index="0"]

script = SubResource( 1 )
normalization = false
fallingDown = false
maxX = 50
maxY = 50
points_x = 1
points_y = 1


